\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Oct 22 15:47:03 CEST 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Thu Oct 22 15:47:03 CEST 2015
name=Drawing[Drawing\\:\\:drawMultiple()].JML normal_behavior operation contract.0
contract=Drawing[Drawing\\:\\:drawMultiple()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "bergman" ) (keyVersion "f29c982fc6c75827991e94a2a905e3419d01d6ee"))

(autoModeTime "3182")

(branch "dummy ID"
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1") (newnames "heapAtPre"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "inEqSimp_ltToLeq" (formula "5"))
(rule "add_zero_right" (formula "5") (term "0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0"))
(rule "assignment" (formula "8"))
(rule "inEqSimp_sepNegMonomial0" (formula "5"))
(rule "polySimp_mulLiterals" (formula "5") (term "0"))
(rule "polySimp_elimOne" (formula "5") (term "0"))
(rule "all_unused" (formula "8") (term "1,0,1"))
(rule "all_unused" (formula "8") (term "1,0,1"))
(rule "concrete_and_3" (formula "8") (term "0,1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_drawMultiple,savedHeapBefore_drawMultiple"))
(rule "simplifyUpdate2" (formula "8") (term "1"))
(rule "arrayLengthNotNegative" (formula "5") (term "0"))
(rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
(rule "leq_literals" (formula "5") (term "0"))
(rule "concrete_or_1" (formula "5"))
(rule "true_left" (formula "5"))
(rule "arrayLengthIsAShort" (formula "5") (term "0"))
(rule "inShort" (formula "5"))
(rule "true_left" (formula "5"))
(rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "0,0") (ifseqformula "1"))
(rule "Partial_inv_axiom_for_JML_class_invariant_nr_0_in_Drawing" (formula "7"))
(rule "nonNull" (formula "7") (inst "i=i"))
(rule "greater_literals" (formula "7") (term "0,1"))
(rule "concrete_impl_1" (formula "7") (term "1"))
(rule "sub_literals" (formula "7") (term "2,1,0,1"))
(rule "nonNullZero" (formula "7") (term "1,0,1"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "9"))
(rule "concrete_or_2" (formula "5"))
(rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "9"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0"))
(rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_Drawing" (formula "8") (inst "i=i"))
(rule "inInt" (formula "8") (term "1,0,0"))
(rule "concrete_and_3" (formula "8") (term "0,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "8") (term "0"))
(rule "nnf_notAnd" (formula "8") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0"))
(rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_Drawing" (formula "9") (inst "j=j") (inst "i=i"))
(rule "inInt" (formula "9") (term "1,0,0,0"))
(rule "concrete_and_3" (formula "9") (term "0,0,0"))
(rule "inInt" (formula "9") (term "1,0,0,0"))
(rule "concrete_and_3" (formula "9") (term "0,0,0"))
(rule "translateJavaAddInt" (formula "9") (term "0,2,1,0,1,1,1,1,0,0"))
(rule "translateJavaAddInt" (formula "9") (term "0,2,0,1,0,1,1,0,0"))
(rule "translateJavaSubInt" (formula "9") (term "0,2,0,0,0,1,1,0,0"))
(rule "translateJavaSubInt" (formula "9") (term "0,2,1,0,0,1,1,1,0,0"))
(rule "translateJavaSubInt" (formula "9") (term "1,1,1,1,0,0,0"))
(rule "translateJavaSubInt" (formula "9") (term "1,0,1,1,0,0,0"))
(rule "polySimp_elimSub" (formula "9") (term "0,2,0,0,0,1,1,0,0"))
(rule "mul_literals" (formula "9") (term "1,0,2,0,0,0,1,1,0,0"))
(rule "polySimp_elimSub" (formula "9") (term "0,2,1,0,0,1,1,1,0,0"))
(rule "mul_literals" (formula "9") (term "1,0,2,1,0,0,1,1,1,0,0"))
(rule "polySimp_elimSub" (formula "9") (term "1,1,1,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "1,1,1,1,1,0,0,0"))
(rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "1,1,0,1,1,0,0,0"))
(rule "polySimp_addComm0" (formula "9") (term "0,2,1,0,1,1,1,1,0,0"))
(rule "polySimp_addComm0" (formula "9") (term "0,2,0,1,0,1,1,0,0"))
(rule "polySimp_addComm0" (formula "9") (term "0,2,0,0,0,1,1,0,0"))
(rule "polySimp_addComm0" (formula "9") (term "0,2,1,0,0,1,1,1,0,0"))
(rule "polySimp_addComm0" (formula "9") (term "1,1,1,1,0,0,0"))
(rule "polySimp_addComm0" (formula "9") (term "1,0,1,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,0,0,0"))
(rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,1,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,1,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,1,1,0,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,1,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,1,0,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,0,1,1,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,1,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,1,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,1,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,1,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,1,1,0,0,0"))
(rule "nnf_imp2or" (formula "9") (term "1,0,0"))
(rule "nnf_imp2or" (formula "9") (term "0,0"))
(rule "nnf_notAnd" (formula "9") (term "0,0,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
(rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
(rule "nnf_notAnd" (formula "9") (term "1,0,0,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,1,0,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0"))
(rule "nnf_notAnd" (formula "9") (term "1,1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,1,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,1,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,1,1,0,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,1,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,1,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,1,1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "9") (term "0,1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,0,1,1,0,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,0,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,1,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,1,1,0,0,0"))
(rule "shift_paren_or" (formula "9") (term "1,0,0,0"))
(rule "shift_paren_or" (formula "9") (term "0,0,0"))
(rule "commute_or" (formula "9") (term "1,0,0,0,0"))
(rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
(rule "commute_and" (formula "9") (term "1,1,1,0,0"))
(rule "commute_and" (formula "9") (term "0,1,1,0,0"))
(rule "cnf_rightDist" (formula "9") (term "1,1,0,0"))
(rule "commute_or" (formula "9") (term "0,1,1,0,0"))
(rule "cnf_rightDist" (formula "9") (term "1,1,1,0,0"))
(rule "commute_or" (formula "9") (term "1,1,1,1,0,0"))
(rule "cnf_rightDist" (formula "9") (term "0,1,1,0,0"))
(rule "cnf_rightDist" (formula "9") (term "1,0,0"))
(rule "commute_or" (formula "9") (term "1,1,0,0"))
(rule "commute_or" (formula "9") (term "1,1,0,1,0,0"))
(rule "cnf_rightDist" (formula "9") (term "1,1,0,0"))
(rule "commute_or_2" (formula "9") (term "1,1,1,0,0"))
(rule "shift_paren_or" (formula "9") (term "0,1,1,0,0"))
(rule "commute_or" (formula "9") (term "0,1,1,1,0,0"))
(rule "cnf_rightDist" (formula "9") (term "0,1,0,0"))
(rule "commute_or_2" (formula "9") (term "1,0,1,0,0"))
(rule "shift_paren_or" (formula "9") (term "0,0,1,0,0"))
(rule "cnf_rightDist" (formula "9") (term "0,0"))
(rule "distr_forallAnd" (formula "9") (term "0"))
(rule "distr_forallAnd" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "commute_or" (formula "10") (term "0,0"))
(rule "cnf_rightDist" (formula "9") (term "0,0"))
(rule "distr_forallAnd" (formula "9") (term "0"))
(rule "distr_forallAnd" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "commute_or_2" (formula "10") (term "0,0"))
(rule "shift_paren_or" (formula "9") (term "0,0"))
(rule "commute_or_2" (formula "10") (term "0,0,0"))
(rule "shift_paren_or" (formula "9") (term "0,0,0"))
(rule "commute_or" (formula "10") (term "0,0,0,0"))
(rule "commute_or_2" (formula "10") (term "0,0,0"))
(rule "cnf_rightDist" (formula "11") (term "0,0"))
(rule "distr_forallAnd" (formula "11") (term "0"))
(rule "distr_forallAnd" (formula "11"))
(rule "andLeft" (formula "11"))
(rule "commute_or_2" (formula "12") (term "0,0"))
(rule "shift_paren_or" (formula "11") (term "0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0"))
(rule "shift_paren_or" (formula "11") (term "0,0,0"))
(rule "commute_or" (formula "12") (term "0,0,0,0"))
(rule "allLeft" (formula "7") (inst "t=Z(0(#))"))
(rule "leq_literals" (formula "7") (term "0,0"))
(rule "concrete_or_2" (formula "7") (term "0"))
(rule "inEqSimp_commuteGeq" (formula "7") (term "0"))
(rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "6"))
(rule "qeq_literals" (formula "7") (term "0,0"))
(rule "concrete_and_2" (formula "7") (term "0"))
(rule "concrete_or_2" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "allLeft" (formula "8") (inst "t=Z(0(#))"))
(rule "leq_literals" (formula "8") (term "0,0"))
(rule "concrete_or_2" (formula "8") (term "0"))
(rule "inEqSimp_commuteGeq" (formula "8") (term "0"))
(rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "6"))
(rule "qeq_literals" (formula "8") (term "0,0"))
(rule "concrete_and_2" (formula "8") (term "0"))
(rule "concrete_or_2" (formula "8"))
(rule "applyEq" (formula "12") (term "1,1,1,0,0,0,0,0") (ifseqformula "8"))
(rule "applyEq" (formula "11") (term "1,1,1,0,0,0,0,0") (ifseqformula "8"))
(rule "applyEq" (formula "10") (term "1,1,1,0,0,0,0,0") (ifseqformula "8"))
(rule "applyEq" (formula "13") (term "1,1,1,0,0,0,0,0") (ifseqformula "8"))
(rule "arrayLengthNotNegative" (formula "8") (term "0"))
(rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
(rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
(rule "leq_literals" (formula "8") (term "0"))
(rule "concrete_or_1" (formula "8"))
(rule "true_left" (formula "8"))
(rule "arrayLengthIsAShort" (formula "8") (term "0"))
(rule "inShort" (formula "8"))
(rule "true_left" (formula "8"))
(rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0") (ifseqformula "1"))
(rule "replace_known_right" (formula "1") (term "0") (ifseqformula "16"))
(rule "concrete_or_2" (formula "1"))
(builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_drawVertical,exc_0,heapAfter_drawVertical,anon_heap_drawVertical") (contract "Drawing[Drawing::drawVertical(int)].JML normal_behavior operation contract.0"))
(branch "Post (drawVertical)"
   (rule "simplifyUpdate2" (formula "17"))
   (rule "simplifyUpdate2" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "18"))
   (rule "simplifyUpdate2" (formula "18"))
   (rule "andLeft" (formula "19"))
   (rule "simplifyUpdate2" (formula "20"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "19"))
   (rule "applyOnPV" (formula "19") (term "0"))
   (rule "simplifyUpdate1" (formula "19") (term "1"))
   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_Drawing" (formula "19") (inst "i=i"))
   (rule "inInt" (formula "19") (term "1,0,0"))
   (rule "concrete_and_3" (formula "19") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0"))
   (rule "pullOutSelect" (formula "19") (term "1,0,0,1,0") (inst "selectSK=Drawing_canvas_0"))
   (rule "applyEq" (formula "20") (term "0,1,1,0") (ifseqformula "19"))
   (rule "applyEq" (formula "20") (term "0,1,1,1,0,0") (ifseqformula "19"))
   (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "17"))
   (rule "elementOfFreshLocs" (formula "19") (term "1,0,0"))
   (rule "elementOfAllLocs" (formula "19") (term "0,0,0,0"))
   (rule "concrete_and_1" (formula "19") (term "0,0,0"))
   (rule "equalUnique" (formula "19") (term "0,0,0,0"))
   (rule "concrete_not_2" (formula "19") (term "0,0,0"))
   (rule "concrete_or_1" (formula "19") (term "0,0"))
   (rule "ifthenelse_true" (formula "19") (term "0"))
   (rule "applyEqReverse" (formula "20") (term "1,0,0,1,0") (ifseqformula "19"))
   (rule "applyEqReverse" (formula "20") (term "0,1,1,0") (ifseqformula "19"))
   (rule "applyEqReverse" (formula "20") (term "0,1,1,1,0,0") (ifseqformula "19"))
   (rule "hideAuxiliaryEq" (formula "19"))
   (rule "nnf_imp2or" (formula "19") (term "0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
   (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
   (rule "mul_literals" (formula "19") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
   (rule "arrayLengthNotNegative" (formula "19") (term "1,1,0"))
   (rule "arrayLengthIsAShort" (formula "20") (term "1,1,0"))
   (rule "inShort" (formula "20"))
   (rule "true_left" (formula "20"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,1,1,0") (ifseqformula "16"))
   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_0_in_Drawing" (formula "22"))
   (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "1"))
   (rule "nonNull" (formula "22") (inst "i=i"))
   (rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
   (rule "nonNullZero" (formula "22") (term "1,0,1,1"))
   (rule "greater_literals" (formula "22") (term "0,1"))
   (rule "concrete_impl_1" (formula "22") (term "1"))
   (rule "andLeft" (formula "22"))
   (rule "notLeft" (formula "22"))
   (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "24"))
   (rule "concrete_or_2" (formula "20"))
   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
   (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "22") (term "0"))
   (rule "nnf_notAnd" (formula "22") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
   (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
   (rule "mul_literals" (formula "22") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_3_in_Drawing" (formula "23") (inst "j=j") (inst "i=i"))
   (rule "inInt" (formula "23") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "23") (term "0,0,0"))
   (rule "inInt" (formula "23") (term "1,0,0,0"))
   (rule "concrete_and_3" (formula "23") (term "0,0,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "1,1,0,0,1,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "1,1,0,0,1,0,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "1,1,0,0,1,1,1,0,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "1,1,0,0,0,1,1,0,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "1,1,0,1,1,1,1,0,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "1,1,0,1,0,1,1,0,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "0,0,1,0,1,1,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "1,1,0,0,1,1,1,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "1,1,0,0,0,1,1,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "1,1,0,1,1,1,1,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "1,1,0,1,0,1,1,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "0,0,1,0,1,1,0,0,0"))
   (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "1,0,0,1,1,1,1,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "1,0,0,1,1,1,1,0,0,0"))
   (rule "translateJavaSubInt" (formula "23") (term "0,2,1,0,0,1,1,1,0,0"))
   (rule "translateJavaAddInt" (formula "23") (term "0,2,0,1,0,1,1,0,0"))
   (rule "translateJavaAddInt" (formula "23") (term "0,2,1,0,1,1,1,1,0,0"))
   (rule "translateJavaSubInt" (formula "23") (term "0,2,0,0,0,1,1,0,0"))
   (rule "translateJavaSubInt" (formula "23") (term "1,0,1,1,0,0,0"))
   (rule "translateJavaSubInt" (formula "23") (term "1,1,1,1,0,0,0"))
   (rule "polySimp_elimSub" (formula "23") (term "0,2,1,0,0,1,1,1,0,0"))
   (rule "mul_literals" (formula "23") (term "1,0,2,1,0,0,1,1,1,0,0"))
   (rule "polySimp_elimSub" (formula "23") (term "0,2,0,0,0,1,1,0,0"))
   (rule "mul_literals" (formula "23") (term "1,0,2,0,0,0,1,1,0,0"))
   (rule "polySimp_elimSub" (formula "23") (term "1,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "1,1,0,1,1,0,0,0"))
   (rule "polySimp_elimSub" (formula "23") (term "1,1,1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "1,1,1,1,1,0,0,0"))
   (rule "polySimp_addComm0" (formula "23") (term "0,2,0,1,0,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "23") (term "0,2,1,0,1,1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "23") (term "0,2,1,0,0,1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "23") (term "0,2,0,0,0,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "23") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_addComm0" (formula "23") (term "1,1,1,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,0,0,0"))
   (rule "add_zero_right" (formula "23") (term "0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0"))
   (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "0,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,1,0,0,0"))
   (rule "add_literals" (formula "23") (term "0,0,0,0,1,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,0,0,1,1,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,1,1,0,0,0"))
   (rule "add_literals" (formula "23") (term "0,0,0,1,1,1,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "23") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "23") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,0,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,1,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,1,1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,1,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,1,1,0,0,0"))
   (rule "pullOutSelect" (formula "23") (term "0,1,1,1,1,1,0,0,0") (inst "selectSK=arr_0"))
   (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "17"))
   (rule "elementOfFreshLocs" (formula "23") (term "1,0,0"))
   (rule "elementOfAllLocs" (formula "23") (term "0,0,0,0"))
   (rule "concrete_and_1" (formula "23") (term "0,0,0"))
   (rule "equalUnique" (formula "23") (term "0,0,0,0"))
   (rule "concrete_not_2" (formula "23") (term "0,0,0"))
   (rule "concrete_or_1" (formula "23") (term "0,0"))
   (rule "ifthenelse_true" (formula "23") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "0,1,1,1,1,1,0,0,0") (ifseqformula "23"))
   (rule "hideAuxiliaryEq" (formula "23"))
   (rule "nnf_imp2or" (formula "23") (term "1,0,0"))
   (rule "nnf_imp2or" (formula "23") (term "0,0"))
   (rule "nnf_notAnd" (formula "23") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0"))
   (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "23") (term "0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "23") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "23") (term "0,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0,0"))
   (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0"))
   (rule "nnf_notAnd" (formula "23") (term "1,1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "23") (term "1,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,0,0,1,1,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,1,1,0,0,0"))
   (rule "add_literals" (formula "23") (term "0,0,0,1,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,1,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,1,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,1,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,1,1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "23") (term "0,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,1,0,0,0"))
   (rule "add_literals" (formula "23") (term "0,0,0,0,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,0,1,1,0,0,0"))
   (rule "shift_paren_or" (formula "23") (term "1,0,0,0"))
   (rule "shift_paren_or" (formula "23") (term "0,0,0"))
   (rule "shift_paren_or" (formula "23") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "23") (term "0,0,0,0"))
   (rule "commute_and" (formula "23") (term "0,1,1,0,0"))
   (rule "commute_and" (formula "23") (term "1,1,1,0,0"))
   (rule "cnf_rightDist" (formula "23") (term "1,1,0,0"))
   (rule "commute_or" (formula "23") (term "0,1,1,0,0"))
   (rule "cnf_rightDist" (formula "23") (term "1,1,1,0,0"))
   (rule "commute_or" (formula "23") (term "1,1,1,1,0,0"))
   (rule "cnf_rightDist" (formula "23") (term "0,1,1,0,0"))
   (rule "cnf_rightDist" (formula "23") (term "1,0,0"))
   (rule "commute_or" (formula "23") (term "1,1,0,0"))
   (rule "commute_or" (formula "23") (term "1,1,0,1,0,0"))
   (rule "cnf_rightDist" (formula "23") (term "1,1,0,0"))
   (rule "commute_or_2" (formula "23") (term "1,1,1,0,0"))
   (rule "shift_paren_or" (formula "23") (term "0,1,1,0,0"))
   (rule "commute_or" (formula "23") (term "0,1,1,1,0,0"))
   (rule "cnf_rightDist" (formula "23") (term "0,1,0,0"))
   (rule "commute_or_2" (formula "23") (term "1,0,1,0,0"))
   (rule "shift_paren_or" (formula "23") (term "0,0,1,0,0"))
   (rule "cnf_rightDist" (formula "23") (term "0,0"))
   (rule "distr_forallAnd" (formula "23") (term "0"))
   (rule "distr_forallAnd" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "commute_or" (formula "24") (term "0,0"))
   (rule "cnf_rightDist" (formula "23") (term "0,0"))
   (rule "distr_forallAnd" (formula "23") (term "0"))
   (rule "distr_forallAnd" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "commute_or_2" (formula "24") (term "0,0"))
   (rule "shift_paren_or" (formula "23") (term "0,0"))
   (rule "commute_or_2" (formula "24") (term "0,0,0"))
   (rule "shift_paren_or" (formula "23") (term "0,0,0"))
   (rule "commute_or" (formula "24") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "24") (term "0,0,0"))
   (rule "cnf_rightDist" (formula "25") (term "0,0"))
   (rule "distr_forallAnd" (formula "25") (term "0"))
   (rule "distr_forallAnd" (formula "25"))
   (rule "andLeft" (formula "25"))
   (rule "commute_or_2" (formula "26") (term "0,0"))
   (rule "shift_paren_or" (formula "25") (term "0,0"))
   (rule "commute_or_2" (formula "26") (term "0,0,0"))
   (rule "shift_paren_or" (formula "25") (term "0,0,0"))
   (rule "commute_or" (formula "26") (term "0,0,0,0"))
   (rule "arrayLengthIsAShort" (formula "23") (term "1,1,1,0,0,0,0,0"))
   (rule "inShort" (formula "23"))
   (rule "true_left" (formula "23"))
   (rule "arrayLengthNotNegative" (formula "23") (term "1,1,1,0,0,0,0,0"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "16"))
   (builtin "Use Operation Contract" (formula "34") (newnames "heapBefore_drawHorizontal,exc_1,heapAfter_drawHorizontal,anon_heap_drawHorizontal") (contract "Drawing[Drawing::drawHorizontal(int)].JML normal_behavior operation contract.0"))
   (branch "Post (drawHorizontal)"
      (rule "simplifyUpdate2" (formula "31"))
      (rule "simplifyUpdate2" (formula "31") (term "1"))
      (rule "andLeft" (formula "31"))
      (rule "sequentialToParallel2" (formula "37"))
      (rule "simplifyUpdate2" (formula "37"))
      (rule "simplifyUpdate3" (formula "37") (term "1,0"))
      (rule "sequentialToParallel2" (formula "32"))
      (rule "simplifyUpdate2" (formula "32"))
      (rule "simplifyUpdate3" (formula "32") (term "0"))
      (rule "andLeft" (formula "32"))
      (rule "simplifyUpdate2" (formula "32"))
      (rule "andLeft" (formula "33"))
      (rule "simplifyUpdate2" (formula "34"))
      (rule "applyOnRigidFormula" (formula "31"))
      (rule "simplifyUpdate1" (formula "31") (term "1"))
      (rule "applyOnRigidFormula" (formula "33"))
      (rule "simplifyUpdate1" (formula "33") (term "1"))
      (rule "applyOnPV" (formula "33") (term "0"))
      (rule "applyOnRigidTerm" (formula "31") (term "0"))
      (rule "applyOnPV" (formula "31") (term "0,0"))
      (rule "simplifyUpdate1" (formula "31") (term "2,0"))
      (rule "simplifyUpdate1" (formula "31") (term "1,0"))
      (rule "methodCallEmpty" (formula "38") (term "1"))
      (rule "tryEmpty" (formula "38") (term "1"))
      (rule "emptyModality" (formula "38") (term "1"))
      (rule "applyOnRigidFormula" (formula "38"))
      (rule "simplifyUpdate2" (formula "38") (term "0"))
      (rule "simplifyUpdate2" (formula "38") (term "1"))
      (rule "applyOnRigidFormula" (formula "38") (term "0"))
      (rule "simplifyUpdate1" (formula "38") (term "1,0"))
      (rule "applyOnPV" (formula "38") (term "0,0"))
      (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "33"))
      (rule "concrete_and_1" (formula "38"))
      (rule "applyOnRigidFormula" (formula "38"))
      (rule "applyOnPV" (formula "38") (term "0"))
      (rule "simplifyUpdate1" (formula "38") (term "1"))
      (rule "eqClose" (formula "38"))
      (rule "closeTrue" (formula "38"))
   )
   (branch "Exceptional Post (drawHorizontal)"
      (rule "simplifyUpdate2" (formula "31"))
      (rule "simplifyUpdate2" (formula "31") (term "1"))
      (rule "andLeft" (formula "31"))
      (rule "sequentialToParallel2" (formula "37"))
      (rule "simplifyUpdate2" (formula "37"))
      (rule "simplifyUpdate3" (formula "37") (term "1,0"))
      (rule "sequentialToParallel2" (formula "32"))
      (rule "simplifyUpdate2" (formula "32"))
      (rule "simplifyUpdate3" (formula "32") (term "0"))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "32"))
      (rule "simplifyUpdate2" (formula "32"))
      (rule "andLeft" (formula "34"))
      (rule "simplifyUpdate2" (formula "35"))
      (rule "notLeft" (formula "32"))
      (rule "close" (formula "35") (ifseqformula "34"))
   )
   (branch "Pre (drawHorizontal)"
      (rule "inInt" (formula "34") (term "1,1,1,1"))
      (rule "concrete_and_3" (formula "34") (term "1,1,1"))
      (rule "simplifyUpdate2" (formula "34"))
      (rule "simplifyUpdate2" (formula "34") (term "1"))
      (rule "applyOnRigidFormula" (formula "34"))
      (rule "applyOnRigidFormula" (formula "34") (term "1"))
      (rule "applyOnPV" (formula "34") (term "0,1"))
      (rule "wellFormedAnonEQ" (formula "34") (term "1") (ifseqformula "17"))
      (rule "replace_known_left" (formula "34") (term "1,1") (ifseqformula "16"))
      (rule "concrete_and_3" (formula "34") (term "1"))
      (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "2"))
      (rule "concrete_and_3" (formula "34"))
      (rule "applyOnRigidFormula" (formula "34"))
      (rule "simplifyUpdate1" (formula "34") (term "1"))
      (rule "applyOnPV" (formula "34") (term "0"))
      (rule "close" (formula "34") (ifseqformula "29"))
   )
)
(branch "Exceptional Post (drawVertical)"
   (rule "simplifyUpdate2" (formula "17"))
   (rule "simplifyUpdate2" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "19"))
   (rule "simplifyUpdate2" (formula "20"))
   (rule "andLeft" (formula "18"))
   (rule "simplifyUpdate2" (formula "18"))
   (rule "notLeft" (formula "18"))
   (rule "close" (formula "21") (ifseqformula "20"))
)
(branch "Pre (drawVertical)"
   (rule "inInt" (formula "19") (term "1,1,1,1"))
   (rule "concrete_and_3" (formula "19") (term "1,1,1"))
   (rule "qeq_literals" (formula "19") (term "0,0,0,1,1"))
   (rule "concrete_and_1" (formula "19") (term "0,0,1,1"))
   (rule "simplifyUpdate2" (formula "19"))
   (rule "simplifyUpdate2" (formula "19"))
   (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "2"))
   (rule "concrete_and_3" (formula "19"))
   (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "15"))
   (rule "concrete_and_3" (formula "19"))
   (rule "inEqSimp_ltRight" (formula "19"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "polySimp_mulComm0" (formula "1") (term "0"))
   (rule "inEqSimp_invertInEq1" (formula "1"))
   (rule "times_zero_2" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
   (rule "qeq_literals" (formula "1") (term "0"))
   (rule "concrete_and_2" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)

}
